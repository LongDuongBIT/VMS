@inject IJSRuntime JsRuntime

<div class="container__list-result">
    @*<SearchResult />*@
    <div class="container-member">
        @if (pagedResult != null && pagedResult.TotalItems != 0)
        {
            @foreach (var item in pagedResult.Items)
            {
                <div class="activity-row d-flex">
                    <div class="activity-space"></div>
                    <div class="activity-container">
                        <div class="activity__img">
                            @if (!string.IsNullOrEmpty(item.Activity.Banner))
                            {
                                <img src="@item.Activity.Banner" alt="Avatar">
                            }
                        </div>
                        <div class="activity__content">
                            <div class="activity__content__title">
                                <p class="member-name1">@item.Activity.Name</p>
                            </div>
                            <div class="activity__content__icon d-flex">
                                <div class="stars-rating">
                                    <VMS.Pages.Organization.RatingPage.Stars StarRating="item.Rating" StarRatingChanged="async (e) => await UpdateRatingAsync(e, item)" />
                                </div>
                                <div class="org-pic d-flex">
                                    <div class="org-pic__icon d-flex">
                                        <span class="material-icons-outlined">
                                            public
                                        </span>
                                    </div>
                                    <div class="org-pic__name">
                                        @item.Activity.Organizer.FullName
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="activity__icon d-flex">
                            <button class="activity__icon__report" @onclick="@(()=>ShowReportPopUp())" id="popup-report_icon">
                                @*Pop-up để report*@
                                <span id="member-report_icon" class="material-icons">report_problem</span>
                            </button>
                            <button class="activity__icon__comment" @onclick="@(()=>ShowCommentPopUp())" id="popup-comment_icon">
                                @*Pop-up để comment*@
                                <span id="member-comment_icon" class="material-icons">comment</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
        <div class="pagination-container d-flex">
            <Pager CurrentPage="@pagedResult.PageIndex"
                   PageCount="@pagedResult.TotalPages"
                   OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })" />
        </div>
    </div>
</div>

@code {

    [CascadingParameter] public IModalService Modal1 { get; set; }
    async Task ShowCommentPopUp()
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal1.Show<VMS.Pages.Organization.RatingPage.PopUpComment>("", options);
    }

    [CascadingParameter] public IModalService Modal2 { get; set; }
    async Task ShowReportPopUp()
    {
        var options = new ModalOptions()
        {

            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal2.Show<VMS.Pages.Organization.RatingPage.PopUpReportMember>("", options);
    }

}