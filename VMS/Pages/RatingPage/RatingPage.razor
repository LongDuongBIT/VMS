@attribute [Route(Routes.RatingPage)]
@using VMS.Application.ViewModels
@inject IJSRuntime JsRuntime

<div class="rating-page">
    <div class="title">
        <p class="title-txt-1">
            Đánh giá
        </p>
        <p class="title-txt-2">
            tình nguyện viên
        </p>
        <p class="title-txt-3">
            Tuyển tình nguyện viên tham gia công tác
            phòng chống dịch Covid19
        </p>
    </div>
    <EditForm Model="@rating" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="header-page">
            <SearchBar />
            <FilterBar />
        </div>
        <div class="body-page">
            <div class="container-member">
                @if (pagedResult != null && pagedResult.Results.Length != 0)
                {
                    @foreach (var item in pagedResult.Results)
                    {
                        <div class="container">
                            <div class="container-avatar">
                                <img src="./img/RatingPage/Ellipse 28.png" alt="avatar" class="member-avatar">
                            </div>
                            <div class="member">
                                <div class="member-name">
                                    <p class="member-name1">@item.MemberName</p>
                                    <p class="member-name2">@item.ShortDescription</p>
                                </div>
                                <Stars />
                                <div class="member-comment">
                                    @*Pop-up để comment*@
                                    <button @onclick="@(()=>ShowCommentPopUp())" id="popup-comment_icon">
                                        <span id="member-comment_icon" class="material-icons">comment</span>
                                    </button>
                                    <div class="member-comment_tooltip">Bạn có điều  gì muốn gửi gắm đến mình hong!</div>
                                </div>
                                <div class="member-report">
                                    @*Pop-up để report*@
                                    <button @onclick="@(()=>ShowReportPopUp())" id="popup-report_icon">
                                        <span id="member-report_icon" class="material-icons">report_problem</span>
                                    </button>
                                    <div class="member-report_tooltip">Báo cáo xấu nếu mình vi phạm nhé!</div>
                                </div>
                            </div>
                        </div>
                    }
                }

            </div>
            <div class="filter">
                <div class="filter-txt">
                    <p class="txt1">
                        Đánh giá
                    </p>
                    <p class="txt2">
                        tất cả
                    </p>
                </div>
                <div class="filter-line">
                    <hr class="line">
                </div>
                <div class="filter-checkbox">
                    <span class="filter-checkbox_container">
                        <InputCheckbox @bind-Value="@rating.Select1" id="filter-checkbox_1" class="filter-checkbox_check"></InputCheckbox>
                        <label for="filter-checkbox_1" class="filter-checkbox_txt">1 sao</label>
                    </span>
                    <span class="filter-checkbox_container">
                        <InputCheckbox @bind-Value="@rating.Select2" id="filter-checkbox_2" class="filter-checkbox_check"></InputCheckbox>
                        <label for="filter-checkbox_2" class="filter-checkbox_txt">2 sao</label>
                    </span>
                    <span class="filter-checkbox_container">
                        <InputCheckbox @bind-Value="@rating.Select3" id="filter-checkbox_3" class="filter-checkbox_check"></InputCheckbox>
                        <label for="filter-checkbox_3" class="filter-checkbox_txt">3 sao</label>
                    </span>
                    <span class="filter-checkbox_container">
                        <InputCheckbox @bind-Value="@rating.Select4" id="filter-checkbox_4" class="filter-checkbox_check"></InputCheckbox>
                        <label for="filter-checkbox_4" class="filter-checkbox_txt">4 sao</label>
                    </span>
                    <span class="filter-checkbox_container">
                        <InputCheckbox @bind-Value="@rating.Select5" id="filter-checkbox_5" class="filter-checkbox_check"></InputCheckbox>
                        <label for="filter-checkbox_5" class="filter-checkbox_txt">5 sao</label>
                    </span>
                </div>
                <button @onclick="@Submit" class="filter-submit">Đánh giá</button>
            </div>
        </div>
    </EditForm>
    <div class="pagination-container">
        <Pager CurrentPage="@pagedResult.CurrentPage"
               PageCount="@pagedResult.PageCount"
               OnPageChanged="@(async (e)=> { page = e; await HandlePageChanged(); })" />
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal1 { get; set; }
    async Task ShowCommentPopUp()
    {
        var options = new ModalOptions()
        {

            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal1.Show<PopUpComment>("", options);
    }

    [CascadingParameter] public IModalService Modal2 { get; set; }
    async Task ShowReportPopUp()
    {
        var options = new ModalOptions()
        {

            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true
        };
        Modal2.Show<PopUpReportMember>("", options);
    }

    Rating rating;
    protected override void OnInitialized()
    {
        rating = new Rating();
    }

    public void Submit()
    {

    }

    /****Pagination****/
    private class FakeData
    {
        public string MemberName { get; set; }
        public string ShortDescription { get; set; }
    }

    public abstract class PagedResultBase
    {
        public int CurrentPage { get; set; }
        public int PageCount { get; set; }
        public int PageSize { get; set; }
        public int RowCount { get; set; }
        public int FirstRowOnPage => Math.Min((CurrentPage - 1) * PageSize + 1, RowCount);
        public int LastRowOnPage => Math.Min(CurrentPage * PageSize, RowCount);
    }

    public class PagedResult<T> : PagedResultBase where T : class
    {
        public T[] Results { get; set; }
    }

    private PagedResult<FakeData> pagedResult;
    private int page = 1;

    protected override async Task OnInitializedAsync()
    {
        pagedResult = GetFakeData();
    }

    private async Task HandlePageChanged()
    {
        pagedResult = GetFakeData();
        StateHasChanged();
        await Interop.ScrollToTop(JsRuntime);
    }

    private PagedResult<FakeData> GetFakeData()
    {
        var result = new PagedResult<FakeData>();
        result.CurrentPage = page;
        result.RowCount = 200;
        result.PageSize = 20;
        result.PageCount = result.RowCount / result.PageSize;
        result.Results = Enumerable.Range(0, result.PageSize).Select(x => new FakeData
        {
            MemberName = "Phạm Thị Ngọc Ánh",
            ShortDescription = "Thành viên vàng trong làng tình nguyện",
        }).ToArray();

        return result;
    }

}
