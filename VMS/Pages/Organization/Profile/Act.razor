@inject IJSRuntime JS;

<div class="container">
    <div class="row act">
        <h1>Hoạt động <span>@Title</span></h1>
        <div class="@(Datas.Count >4 ? "owl-carousel owl-theme organize__carousel" : "d-flex ") position-relative">
            @foreach (var item in Datas)
            {
                <div class="@(Datas.Count >4 ? "" : "w-23 mx-2") act-container item position-relative">
                    <div class="img-container position-relative">
                        <img src="./img/RelatedActivities/2nd-activity.png" alt="" class="act-img">
                        <div class="@(item.IsClose ? "overlay" : "")"></div>
                    </div>
                    <div class="act-content @(OverridesImg ? "position-absolute act-content-overrides ":"" )">
                        <a href="@Routes.ActivityInfo" class="@(item.IsClose ? "content-cl" : "content-nm")">
                            <h3 class="act-title lm-text @(item.IsClose ? "title-cl" : "title-nm")">@item.Title</h3>
                        </a>
                    </div>
                    <ul class="act-menu p-2 @(item.IsMenu ? "d-block" : "d-none")">
                        <li class="edit pb-2">Chỉnh sửa</li>
                        <li @onclick="(() => ShowDeleteModal())" class="delete pb-2">Xóa</li>
                        <li @onclick="(() => ShowCloseModal(item.Id))" class="close pb-2">Đóng hoạt động</li>
                    </ul>
                    @if (HaveControl)
                    {
                        <i @onclick="() => ShowMenu(item.Id)" class="material-icons position-absolute @(item.IsClose ? "d-none" : "")">
                            more_horiz
                        </i>
                    }


                    @if (HaveHeart)
                    {
                        <span class="material-icons-outlined icon-favorite position-absolute">
                            favorite
                        </span>
                    }
                </div>
            }




        </div>
        @if (HaveBorder)
        {
            @if (HaveDecor)
            {
                <div class="col-8">
                    <div class="bottom-line act"></div>
                </div>
            }
            else
            {
                <div class="col-8 ms-auto">
                    <div class="bottom-line"></div>
                </div>
            }
        }

        @if (HaveLinkAll) {
            <div class="act__linkAll text-end">
                <a>Xem tất cả >>></a>
            </div>
        }



    </div>
</div>

@code {
    int pendingId = -1;
    bool isLoading;

    [Parameter] public bool HaveControl { get; set; } = false;
    [Parameter] public bool HaveDecor { get; set; } = true;
    [Parameter] public string Title { get; set; }
    [Parameter] public bool HaveHeart { get; set; } = false;
    [Parameter] public bool OverridesImg { get; set; } = false;
    [Parameter] public bool HaveBorder { get; set; } = true;
    [Parameter] public bool HaveLinkAll { get; set; } = false;
    [Parameter] public List<FakeData> Datas { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Datas.Count > 0)
        {
            await JS.InvokeVoidAsync("vms.OrganizeCarousel");
            await JS.InvokeVoidAsync("vms.AddOutsideClickMenuHandler", DotNetObjectReference.Create(this), nameof(HideMenuInterop));
        }
    }

    void ShowMenu(int id)
    {
        pendingId = id;
        Datas.ForEach(a => a.IsMenu = a.Id == pendingId ? !a.IsMenu : false);
    }

    [JSInvokable]
    public Task HideMenuInterop()
    {
        Datas.ForEach(a => a.IsMenu = false);
        return InvokeAsync(StateHasChanged);
    }

    private void ShowDeleteModal()
    {

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
        };

        Modal.Show<DeleteConfirm>("", options);
    }

    private async Task ShowCloseModal(int pendingId = -1)
    {

        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
        };

        var result = await Modal.Show<CloseConfirm>("", options).Result;

        if ((bool)result.Data)
        {
            Datas[pendingId].IsClose = true;
            Modal.Show<CloseSuccess>("", options);
        }

    }
}