@using VMS.Application.ViewModels;

<div class="my-modal">
    <div class="modal__content">
        <div class="modal__edit">
            <div @onclick="CloseModalAsync" class="icon-close">
                <span class="material-icons">
                    close
                </span>
            </div>
            <h3 class="text-center">Sửa tài khoản <span>quản trị viên</span></h3>
            <EditForm Model="org">
                <DataAnnotationsValidator />
                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title--name">Tên <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.FullName" class="form-control" />
                    </div>
                </div>
                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title-password">Mật khẩu <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.FullName" type="password" name="avd" class="form-control" />
                    </div>
                </div>
                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title--passwordSp">Mật khẩu quản trị viên <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.FullName" type="password" name="avd" class="form-control" />
                    </div>
                </div>

                <div class="from__btn text-center">
                    <button @onclick="CloseModalAsync" class="btn btn-cancel">Hủy</button>
                    <button @onclick="ShowEditConfirm" type="submit" class="btn btn-create">Sửa tài khoản</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private CreateOrgProfileViewModel org = new();
    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; }

    private async Task CloseModalAsync()
    {
        await Modal.CloseAsync();
    }

    [CascadingParameter] public IModalService ModalConfirm { get; set; }

    private async Task ShowEditConfirm()
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
        };
        await Modal.CloseAsync();
        await ModalConfirm.Show<EditConfirm> ("", options).Result;
    }
}
