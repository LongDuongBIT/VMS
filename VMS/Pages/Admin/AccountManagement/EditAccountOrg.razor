@using VMS.Application.ViewModels;

<div class="my-modal">
    <div class="modal__content">
        <div class="modal__edit">
            <div @onclick="CloseModalAsync" class="icon-close">
                <span class="material-icons">
                    close
                </span>
            </div>
            <h3 class="text-center">Sửa tài khoản <span>tổ chức</span></h3>
            <EditForm Model="org">
                <DataAnnotationsValidator />
                <div class="d-flex align-items-center mb-4">
                    <p class="form__title form__title--level">Cấp <span>(*)</span>:</p>
                    <div class="position-relative">
                        <input @onclick="ToggLeLevelDropdown" @onfocusout="CloseLevelDropdown" class="popup-btn form-control @(isLevelGrey? "bg-grey" : "")" value="@levelChoosenValue" readonly />
                        <div @onclick:preventDefault class="my-dropdown" style="display: @(isLevelShow ? "block" : "none")">
                            <ul>
                                @if (Levels is not null)

                                {
                                    @foreach (var level in Levels)
                                    {
                                        <li @onmousedown="() => ChooseLevelValue(level)">@level.Level</li>
                                    }
                                }
                            </ul>
                        </div>
                        <span class="material-icons-outlined position-absolute popup-btn-icon">
                            expand_more
                        </span>
                    </div>
                </div>
                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title--name">Tên tổ chức <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.FullName" class="form-control" />
                    </div>
                </div>

                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title--email">Email <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.Email" class="form-control" />
                    </div>
                </div>
                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title--password">Mật khẩu <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.FullName" type="password" name="avd" class="form-control" />                     
                    </div>
                </div>
                <div class="d-flex align-items-center mb-3">
                    <p class="form__title form__title--passwordSp">Mật khẩu quản trị viên <span>(*)</span>:</p>
                    <div class="">
                        <InputText @bind-Value="@org.FullName" type="password" name="avd" class="form-control" />
                    </div>
                </div>

                <div class="from__btn text-center">
                    <button @onclick="CloseModalAsync" class="btn btn-cancel">Hủy</button>
                    <button @onclick="ShowEditConfirm" type="submit" class="btn btn-create">Sửa tài khoản</button>

                </div>

            </EditForm>

        </div>

    </div>
</div>

@code {
    // Modal

    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; }

    private async Task CloseModalAsync()
    {
        await Modal.CloseAsync();
    }

    [CascadingParameter] public IModalService ModalConfirm { get; set; }

    private async Task ShowEditConfirm()
    {
        var options = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
        };
        await Modal.CloseAsync();
        await ModalConfirm.Show<EditConfirm> ("", options).Result;
    }

    // popup drop-down
    private CreateOrgProfileViewModel org = new();


    private string levelChoosenValue = "Cấp";
    private bool isLevelShow;
    private bool isLevelGrey = false;

    public class fakeLevel
    {
        public string Level { get; set; }
    }
    private List<fakeLevel> Levels = new()
    {
        new fakeLevel() { Level = "Ban Chuyên môn" },
        new fakeLevel() { Level = "Khoa/Viện/KTX" },
        new fakeLevel() { Level = "CLB/Đội/Nhóm" },
    };
    private void ChooseLevelValue(fakeLevel level)
    {
        levelChoosenValue = level.Level;
        isLevelGrey = true;
    }
    private void ToggLeLevelDropdown()
    {
        isLevelShow = !isLevelShow;
    }

    private void CloseLevelDropdown()
    {
        isLevelShow = false;
    }
}
